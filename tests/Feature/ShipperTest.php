<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

use App\Shipper;

/**
 * @group shipper
 */
class ShipperTest extends TestCase
{

    use RefreshDatabase;
    use WithoutMiddleware;

    /** @test * */
    public function can_access_index()
    {
        $response = $this->get('shipper');
        $response->assertOk();
    }

    /** @test * */
    public function can_access_show()
    {
        $item = factory(Shipper::class)->create();

        $response = $this->get(route('shipper.show', $item->id, ['shipper' => $item]));

        $response->assertOk();
    }

    /** @test * */
    public function can_access_create()
    {
        $response = $this->get(route('shipper.create'));

        $response->assertOk();
    }

    /** @test * */
    public function can_store_shipper()
    {
        $item = factory(Shipper::class)->make();

        $response = $this->post(route('shipper.store'), $item->toArray());

        $this->assertDatabaseHas('shippers', $item->toArray());
    }

    /** @test * */
    public function can_access_edit()
    {
        $item = factory(Shipper::class)->create();

        $response = $this->get(route('shipper.edit', $item));

        $response->assertStatus(200);
    }

    /** @test * */
    public function can_update_shipper()
    {

        $item = factory(Shipper::class)->create();

        $this->assertDatabaseHas('shippers', $item->toArray());

        $data = $item->toArray();

        // Change your data here
        $data['created_at'] = now()->addDay();

        $response = $this->put(route('shipper.update', $item), $data);

        $this->assertEquals($data['created_at'], $item->fresh()->created_at);

        $response->assertRedirect(route('shipper.edit', $item));
    }

    /** @test * */
    public function can_destroy_shipper()
    {

        $item = factory(Shipper::class)->create();

        $this->assertDatabaseHas('shippers', $item->toArray());

        $response = $this->delete(route('shipper.destroy', $item));

        $this->assertDatabaseMissing('shippers', $item->toArray());

        $response->assertRedirect(route('shipper.index'));
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
